<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body { 
      font-family: 'Inter', sans-serif; 
      background: #000;
      color: #fff;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      overflow: hidden;
    }
    
    /* Header */
    .header {
      background: #000;
      padding: 16px 48px;
      display: flex;
      align-items: center;
      gap: 32px;
      border-bottom: 1px solid #1a1a1a;
      z-index: 100;
    }
    .logo {
      display: flex;
      align-items: center;
      flex-shrink: 0;
    }
    .logo img {
      height: 32px;
      width: auto;
    }
    .search-container {
      flex: 1;
      max-width: 600px;
      position: relative;
    }
    .search-icon {
      position: absolute;
      left: 20px;
      top: 50%;
      transform: translateY(-50%);
      width: 20px;
      height: 20px;
      pointer-events: none;
    }
    .search-icon svg {
      width: 100%;
      height: 100%;
      fill: #666;
    }
    .search-input {
      width: 100%;
      padding: 14px 24px 14px 56px;
      background: #1a1a1a;
      border: 2px solid transparent;
      border-radius: 50px;
      color: #fff;
      font-size: 15px;
      transition: all 0.2s;
      font-family: 'Inter', sans-serif;
    }
    .search-input:focus {
      outline: none;
      border-color: #fff;
      background: #242424;
    }
    .search-input::placeholder {
      color: #666;
    }
    .header-actions {
      display: flex;
      align-items: center;
      gap: 20px;
      margin-left: auto;
    }
    .user-avatar {
      width: 40px;
      height: 40px;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 700;
      font-size: 16px;
      cursor: pointer;
      transition: transform 0.2s;
    }
    .user-avatar:hover {
      transform: scale(1.05);
    }
    .btn-logout {
      padding: 10px 28px;
      background: transparent;
      border: 1px solid #333;
      border-radius: 50px;
      color: #fff;
      font-size: 14px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s;
      font-family: 'Inter', sans-serif;
    }
    .btn-logout:hover {
      border-color: #fff;
      transform: scale(1.05);
    }
    
    /* Main Layout */
    .main-layout {
      display: flex;
      flex: 1;
      overflow: hidden;
    }
    
    /* Content Area */
    .content-area {
      flex: 1;
      overflow-y: auto;
      padding: 40px 48px 120px;
    }
    
    /* Resize Handle */
    .resize-handle {
      width: 4px;
      background: transparent;
      cursor: col-resize;
      position: relative;
      transition: background 0.2s;
    }
    .resize-handle:hover {
      background: #333;
    }
    .resize-handle::before {
      content: '';
      position: absolute;
      left: -4px;
      right: -4px;
      top: 0;
      bottom: 0;
    }
    
    /* Right Sidebar - Now Playing */
    .right-sidebar {
      width: 420px;
      min-width: 300px;
      max-width: 600px;
      background: #0a0a0a;
      border-left: 1px solid #1a1a1a;
      padding: 32px 24px;
      overflow-y: auto;
      display: none;
    }
    .right-sidebar.active {
      display: block;
    }
    .sidebar-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      margin-bottom: 24px;
    }
    .sidebar-title {
      font-size: 14px;
      font-weight: 600;
      color: #b3b3b3;
    }
    .now-playing-card {
      background: #121212;
      border-radius: 12px;
      overflow: hidden;
      margin-bottom: 24px;
    }
    .now-playing-image {
      width: 100%;
      aspect-ratio: 1;
      background: #1a1a1a;
      overflow: hidden;
    }
    .now-playing-image img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    .now-playing-info {
      padding: 24px;
    }
    .now-playing-title {
      font-size: 24px;
      font-weight: 800;
      margin-bottom: 8px;
      line-height: 1.2;
    }
    .now-playing-artist {
      font-size: 16px;
      color: #b3b3b3;
    }
    
    /* Section */
    .section {
      margin-bottom: 56px;
    }
    .section-header {
      margin-bottom: 24px;
    }
    .section-title {
      font-size: 32px;
      font-weight: 800;
      letter-spacing: -1px;
    }
    
    /* Cards Grid */
    .cards-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
      gap: 24px;
    }
    
    /* Card */
    .card {
      background: #181818;
      border-radius: 8px;
      padding: 16px;
      transition: all 0.3s;
      cursor: pointer;
      position: relative;
    }
    .card:hover {
      background: #282828;
    }
    .card-image {
      width: 100%;
      aspect-ratio: 1;
      border-radius: 6px;
      overflow: hidden;
      margin-bottom: 16px;
      position: relative;
      background: #282828;
    }
    .card-image img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: opacity 0.3s;
    }
    .card:hover .card-image img {
      opacity: 0.6;
    }
    .play-btn {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 56px;
      height: 56px;
      background: #fff;
      border-radius: 50%;
      border: none;
      display: flex;
      align-items: center;
      justify-content: center;
      opacity: 0;
      transition: all 0.3s;
      cursor: pointer;
      box-shadow: 0 8px 24px rgba(0, 0, 0, 0.5);
    }
    .card:hover .play-btn {
      opacity: 1;
    }
    .play-btn svg {
      width: 24px;
      height: 24px;
      fill: #000;
      margin-left: 2px;
    }
    .play-btn.playing {
      opacity: 1;
    }
    .play-btn.playing svg {
      display: none;
    }
    .play-btn.playing::after {
      content: '';
      width: 4px;
      height: 20px;
      background: #000;
      box-shadow: 8px 0 0 #000;
    }
    .card-badge {
      position: absolute;
      top: 12px;
      left: 12px;
      background: #1db954;
      color: #000;
      padding: 6px 12px;
      border-radius: 4px;
      font-size: 11px;
      font-weight: 800;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }
    .card-info {
      padding: 0 4px;
    }
    .card-title {
      font-size: 16px;
      font-weight: 700;
      margin-bottom: 8px;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    .card-artist {
      font-size: 14px;
      color: #b3b3b3;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    
    /* Music Player */
    .music-player {
      position: fixed;
      bottom: 0;
      left: 0;
      right: 0;
      background: #181818;
      border-top: 1px solid #282828;
      padding: 12px 16px;
      display: none;
      z-index: 1000;
    }
    .music-player.active {
      display: block;
    }
    .player-wrapper {
      display: flex;
      align-items: center;
      gap: 16px;
      max-width: 1800px;
      margin: 0 auto;
    }
    .player-left {
      display: flex;
      align-items: center;
      gap: 12px;
      min-width: 240px;
    }
    .player-thumb {
      width: 56px;
      height: 56px;
      border-radius: 4px;
      overflow: hidden;
      background: #282828;
      flex-shrink: 0;
    }
    .player-thumb img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    .player-info {
      flex: 1;
      min-width: 0;
    }
    .player-title {
      font-size: 14px;
      font-weight: 700;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      margin-bottom: 4px;
    }
    .player-artist {
      font-size: 12px;
      color: #b3b3b3;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    .player-center {
      flex: 1;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 8px;
      max-width: 720px;
    }
    .player-buttons {
      display: flex;
      align-items: center;
      gap: 16px;
    }
    .control-btn {
      background: none;
      border: none;
      color: #b3b3b3;
      cursor: pointer;
      transition: all 0.2s;
      font-size: 16px;
      padding: 8px;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .control-btn:hover {
      color: #fff;
      transform: scale(1.1);
    }
    .control-btn.play {
      width: 36px;
      height: 36px;
      background: #fff;
      border-radius: 50%;
      color: #000;
      font-size: 18px;
    }
    .control-btn.play:hover {
      transform: scale(1.06);
    }
    .player-progress-wrapper {
      width: 100%;
      display: flex;
      align-items: center;
      gap: 12px;
    }
    .time {
      font-size: 12px;
      color: #b3b3b3;
      min-width: 40px;
    }
    .progress-bar {
      flex: 1;
      height: 4px;
      background: #4d4d4d;
      border-radius: 2px;
      cursor: pointer;
      position: relative;
      transition: height 0.2s;
    }
    .progress-bar:hover {
      height: 6px;
    }
    .progress-fill {
      height: 100%;
      background: #fff;
      border-radius: 2px;
    }
    .player-right {
      min-width: 180px;
    }
    
    /* Empty state */
    .empty-state {
      text-align: center;
      padding: 80px 20px;
    }
    .empty-state h3 {
      font-size: 24px;
      font-weight: 700;
      margin-bottom: 12px;
    }
    .empty-state p {
      color: #b3b3b3;
      font-size: 16px;
      margin-bottom: 24px;
    }
    .btn-primary {
      padding: 12px 32px;
      background: #fff;
      color: #000;
      border-radius: 50px;
      font-weight: 700;
      font-size: 14px;
      text-decoration: none;
      display: inline-block;
      transition: all 0.2s;
      border: none;
      cursor: pointer;
      font-family: 'Inter', sans-serif;
    }
    .btn-primary:hover {
      transform: scale(1.05);
    }
    
    @media (max-width: 1200px) {
      .right-sidebar { display: none !important; }
      .resize-handle { display: none; }
    }
    
    @media (max-width: 768px) {
      .header { padding: 16px 24px; }
      .content-area { padding: 32px 24px 120px; }
      .cards-grid { grid-template-columns: repeat(2, 1fr); gap: 16px; }
      .player-left { min-width: 180px; }
      .player-right { display: none; }
    }
  </style>
</head>
<body>
  <!-- Header -->
  <header class="header">
    <div class="logo">
      <img src="/public/img/saoclao.png" alt="SAOCLAO">
    </div>
    <div class="search-container">
      <div class="search-icon">
        <svg viewBox="0 0 24 24">
          <path d="M15.5 14h-.79l-.28-.27A6.471 6.471 0 0 0 16 9.5 6.5 6.5 0 1 0 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
        </svg>
      </div>
      <input 
        type="text" 
        class="search-input" 
        placeholder="Bạn muốn phát nội dung gì?"
      >
    </div>
    <div class="header-actions">
      <div class="user-avatar" title="<%= user.username %>">
        <%= user.username.charAt(0).toUpperCase() %>
      </div>
      <form method="post" action="/logout" style="display:inline">
        <button type="submit" class="btn-logout">Đăng xuất</button>
      </form>
    </div>
  </header>
  
  <!-- Main Layout -->
  <div class="main-layout">
    <!-- Content Area -->
    <div class="content-area">
      <!-- Recommendations -->
      <section class="section">
        <div class="section-header">
          <h2 class="section-title">Có thể bạn thích</h2>
        </div>
        
        <% if (moreOfWhatYouLike && moreOfWhatYouLike.length > 0) { %>
          <div class="cards-grid">
            <% moreOfWhatYouLike.slice(0, 6).forEach((track, index) => { %>
              <div class="card" data-track-id="<%= track._id %>">
                <div class="card-image">
                  <img src="<%= track.coverUrl || 'https://images.unsplash.com/photo-1470225620780-dba8ba36b745?w=400' %>" alt="<%= track.title %>">
                  <button class="play-btn" onclick="playTrack('<%= track._id %>', '<%= track.title %>', '<%= track.artist || 'Unknown' %>', '<%= track.coverUrl || '' %>', '<%= track.audioUrl %>')">
                    <svg viewBox="0 0 24 24"><path d="M8 5v14l11-7z"/></svg>
                  </button>
                  <% if (index === 0) { %>
                    <div class="card-badge">Daily Mix</div>
                  <% } %>
                </div>
                <div class="card-info">
                  <div class="card-title"><%= track.title %></div>
                  <div class="card-artist"><%= track.artist || 'Nghệ sĩ không rõ' %></div>
                </div>
              </div>
            <% }) %>
          </div>
        <% } else { %>
          <div class="empty-state">
            <h3>Chưa có gợi ý</h3>
            <p>Nghe thêm nhạc để nhận gợi ý phù hợp</p>
            <a href="/" class="btn-primary">Khám phá ngay</a>
          </div>
        <% } %>
      </section>
      
      <!-- Recently Played -->
      <section class="section">
        <div class="section-header">
          <h2 class="section-title">Nghe gần đây</h2>
        </div>
        
        <% if (recentlyPlayed && recentlyPlayed.length > 0) { %>
          <% 
          const uniqueTracks = [];
          const seen = new Set();
          recentlyPlayed.forEach(track => {
            if (!seen.has(track._id.toString())) {
              seen.add(track._id.toString());
              uniqueTracks.push(track);
            }
          });
          %>
          <div class="cards-grid">
            <% uniqueTracks.slice(0, 6).forEach(track => { %>
              <div class="card" data-track-id="<%= track._id %>">
                <div class="card-image">
                  <img src="<%= track.coverUrl || 'https://images.unsplash.com/photo-1470225620780-dba8ba36b745?w=400' %>" alt="<%= track.title %>">
                  <button class="play-btn" onclick="playTrack('<%= track._id %>', '<%= track.title %>', '<%= track.artist || 'Unknown' %>', '<%= track.coverUrl || '' %>', '<%= track.audioUrl %>')">
                    <svg viewBox="0 0 24 24"><path d="M8 5v14l11-7z"/></svg>
                  </button>
                </div>
                <div class="card-info">
                  <div class="card-title"><%= track.title %></div>
                  <div class="card-artist"><%= track.artist || 'Nghệ sĩ không rõ' %></div>
                </div>
              </div>
            <% }) %>
          </div>
        <% } else { %>
          <div class="empty-state">
            <h3>Chưa nghe bài nào</h3>
            <p>Khám phá âm nhạc mới</p>
            <a href="/" class="btn-primary">Khám phá ngay</a>
          </div>
        <% } %>
      </section>
    </div>
    
    <!-- Resize Handle -->
    <div class="resize-handle" id="resizeHandle"></div>
    
    <!-- Right Sidebar - Now Playing -->
    <aside class="right-sidebar" id="rightSidebar">
      <div class="sidebar-header">
        <h3 class="sidebar-title">Dành cho <%= user.name %></h3>
      </div>
      <div class="now-playing-card">
        <div class="now-playing-image" id="sidebarImage"></div>
        <div class="now-playing-info">
          <div class="now-playing-title" id="sidebarTitle">-</div>
          <div class="now-playing-artist" id="sidebarArtist">-</div>
        </div>
      </div>
    </aside>
  </div>
  
  <!-- Music Player -->
  <div class="music-player" id="musicPlayer">
    <div class="player-wrapper">
      <div class="player-left">
        <div class="player-thumb" id="playerThumb"></div>
        <div class="player-info">
          <div class="player-title" id="playerTitle">Tên bài hát</div>
          <div class="player-artist" id="playerArtist">Nghệ sĩ</div>
        </div>
      </div>
      
      <div class="player-center">
        <div class="player-buttons">
          <button class="control-btn">&#9664;&#9664;</button>
          <button class="control-btn">&#9664;</button>
          <button class="control-btn play" id="playPauseBtn" onclick="togglePlay()">&#9654;</button>
          <button class="control-btn">&#9654;</button>
          <button class="control-btn">&#9654;&#9654;</button>
        </div>
        <div class="player-progress-wrapper">
          <span class="time" id="currentTime">0:00</span>
          <div class="progress-bar" id="progressBar" onclick="seekTo(event)">
            <div class="progress-fill" id="progressFill" style="width:0%"></div>
          </div>
          <span class="time" id="duration">0:00</span>
        </div>
      </div>
      
      <div class="player-right"></div>
    </div>
  </div>
  
  <audio id="audioPlayer"></audio>
  
  <script>
    const audio = document.getElementById('audioPlayer');
    const musicPlayer = document.getElementById('musicPlayer');
    const rightSidebar = document.getElementById('rightSidebar');
    const resizeHandle = document.getElementById('resizeHandle');
    const playPauseBtn = document.getElementById('playPauseBtn');
    const progressFill = document.getElementById('progressFill');
    const currentTimeEl = document.getElementById('currentTime');
    const durationEl = document.getElementById('duration');
    
    // Resize functionality
    let isResizing = false;
    let startX = 0;
    let startWidth = 0;
    
    resizeHandle.addEventListener('mousedown', (e) => {
      isResizing = true;
      startX = e.clientX;
      startWidth = rightSidebar.offsetWidth;
      document.body.style.cursor = 'col-resize';
      document.body.style.userSelect = 'none';
    });
    
    document.addEventListener('mousemove', (e) => {
      if (!isResizing) return;
      const diff = startX - e.clientX;
      const newWidth = Math.min(Math.max(startWidth + diff, 300), 600);
      rightSidebar.style.width = newWidth + 'px';
    });
    
    document.addEventListener('mouseup', () => {
      if (isResizing) {
        isResizing = false;
        document.body.style.cursor = '';
        document.body.style.userSelect = '';
      }
    });
    
    // Player functionality
    window.addEventListener('load', () => {
      const savedState = localStorage.getItem('playerState');
      if (savedState) {
        restorePlayer(JSON.parse(savedState));
      }
    });
    
    function playTrack(id, title, artist, cover, audioUrl) {
      document.getElementById('playerTitle').textContent = title;
      document.getElementById('playerArtist').textContent = artist || 'Nghệ sĩ không rõ';
      document.getElementById('sidebarTitle').textContent = title;
      document.getElementById('sidebarArtist').textContent = artist || 'Nghệ sĩ không rõ';
      
      const thumbHTML = cover ? `<img src="${cover}" alt="${title}">` : '';
      document.getElementById('playerThumb').innerHTML = thumbHTML;
      document.getElementById('sidebarImage').innerHTML = thumbHTML;
      
      musicPlayer.classList.add('active');
      rightSidebar.classList.add('active');
      
      document.querySelectorAll('.play-btn').forEach(btn => btn.classList.remove('playing'));
      const btn = document.querySelector(`[data-track-id="${id}"] .play-btn`);
      if (btn) btn.classList.add('playing');
      
      if (audio.src === audioUrl && !audio.paused) {
        audio.pause();
        playPauseBtn.innerHTML = '&#9654;';
      } else {
        audio.src = audioUrl;
        audio.play();
        playPauseBtn.innerHTML = '&#10074;&#10074;';
        
        savePlayerState({ id, title, artist, cover, audioUrl, currentTime: 0 });
        
        fetch(`/api/plays/${id}`, { method: 'POST' })
          .catch(err => console.error('Failed to save play:', err));
      }
    }
    
    function restorePlayer(state) {
      document.getElementById('playerTitle').textContent = state.title;
      document.getElementById('playerArtist').textContent = state.artist || 'Nghệ sĩ không rõ';
      document.getElementById('sidebarTitle').textContent = state.title;
      document.getElementById('sidebarArtist').textContent = state.artist || 'Nghệ sĩ không rõ';
      
      const thumbHTML = state.cover ? `<img src="${state.cover}" alt="${state.title}">` : '';
      document.getElementById('playerThumb').innerHTML = thumbHTML;
      document.getElementById('sidebarImage').innerHTML = thumbHTML;
      
      musicPlayer.classList.add('active');
      rightSidebar.classList.add('active');
      audio.src = state.audioUrl;
      audio.currentTime = state.currentTime || 0;
      
      const btn = document.querySelector(`[data-track-id="${state.id}"] .play-btn`);
      if (btn) btn.classList.add('playing');
    }
    
    function savePlayerState(state) {
      localStorage.setItem('playerState', JSON.stringify(state));
    }
    
    function togglePlay() {
      if (audio.paused) {
        audio.play();
        playPauseBtn.innerHTML = '&#10074;&#10074;';
      } else {
        audio.pause();
        playPauseBtn.innerHTML = '&#9654;';
      }
    }
    
    function seekTo(e) {
      const bar = e.currentTarget;
      const clickX = e.offsetX;
      const width = bar.offsetWidth;
      audio.currentTime = (clickX / width) * audio.duration;
    }
    
    function formatTime(seconds) {
      if (isNaN(seconds)) return '0:00';
      const mins = Math.floor(seconds / 60);
      const secs = Math.floor(seconds % 60);
      return `${mins}:${secs.toString().padStart(2, '0')}`;
    }
    
    audio.addEventListener('timeupdate', () => {
      const progress = (audio.currentTime / audio.duration) * 100;
      progressFill.style.width = progress + '%';
      currentTimeEl.textContent = formatTime(audio.currentTime);
      
      const savedState = localStorage.getItem('playerState');
      if (savedState) {
        const state = JSON.parse(savedState);
        state.currentTime = audio.currentTime;
        savePlayerState(state);
      }
    });
    
    audio.addEventListener('loadedmetadata', () => {
      durationEl.textContent = formatTime(audio.duration);
    });
    
    audio.addEventListener('ended', () => {
      playPauseBtn.innerHTML = '&#9654;';
      document.querySelectorAll('.play-btn').forEach(btn => btn.classList.remove('playing'));
    });
  </script>
</body>
</html>